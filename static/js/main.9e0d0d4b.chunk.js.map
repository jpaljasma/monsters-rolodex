{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/seach-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","alt","src","monster","id","name","href","email","CardList","monsters","length","map","key","searchField","SearchBox","placeholder","handleChange","minLength","delayTimeout","type","size","onChange","App","handleSearchBoxChange","e","setState","target","value","trim","state","fetch","then","response","json","users","this","_s","toLowerCase","filteredMonsters","filter","includes","style","maxWidth","position","top","right","logo","margin","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,kC,wQCI9BC,G,MAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,cACJC,IAAG,mCAA8BH,EAAMI,QAAQC,GAA5C,4BAEL,4BAAKL,EAAMI,QAAQE,MACnB,2BACE,uBAAGC,KAAI,iBAAYP,EAAMI,QAAQI,QAAUR,EAAMI,QAAQI,WCPlDC,G,MAAW,SAAAT,GACtB,OAAGA,EAAMU,UAAYV,EAAMU,SAASC,OAAS,EAEvC,yBAAKV,UAAU,aACZD,EAAMU,SAASE,KAAI,SAAAR,GAAO,OACzB,kBAAC,EAAD,CAAMS,IAAKT,EAAQC,GAAID,QAASA,QAMnCJ,EAAMc,YACA,yBAAKb,UAAU,SAAf,uCAA4DD,EAAMc,YAAlE,MAGN,qB,wBCbIC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,UAAWC,EAAzC,EAAyCA,aAAzC,OACvB,kBAAC,IAAD,CACElB,UAAU,SACVmB,KAAK,SACLJ,YAAaA,EACbK,KAAK,QACLH,UAAWA,GAAa,EACxBC,aAAcA,GAAgB,IAC9BG,SAAUL,KCqDCM,G,kBA3Db,aAAe,IAAD,8BACZ,+CAqBFC,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CAACZ,YAAaW,EAAEE,OAAOC,MAAMC,UArB3C,EAAKC,MAAQ,CACXpB,SAAU,GACVI,YAAa,IAJH,E,iFAcO,IAAD,OAElBiB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEhB,SAAUyB,S,+BAQpC,MAI2BC,KAAKN,MAA/BpB,EAJD,EAICA,SACF2B,EALC,EAIWvB,YACKwB,cACjBC,EAAmB7B,EAAS8B,QAAQ,SAAApC,GACxC,MAAG,KAAOiC,GACHjC,EAAQE,KAAKgC,cAAcG,SAASJ,MAG7C,OACE,yBAAKpC,UAAU,OACf,yBACEyC,MAAO,CAAEC,SAAU,QAASC,SAAU,QAASC,IAAK,QAASC,MAAO,SACpE7C,UAAU,WACVE,IAAK4C,IACL7C,IAAI,eAEN,gDACE,yBAAKwC,MAAO,CAAEM,OAAQ,cAAeC,UAAW,WAC9C,kBAAC,EAAD,CACE/B,UAAW,EACXC,aAAc,IACdH,YAAY,uBACZC,aAAcmB,KAAKZ,yBAEvB,kBAAC,EAAD,CAAUd,SAAU6B,EAAkBzB,YAAauB,S,GAvDzCa,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e0d0d4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nimport \"./card.styles.scss\";\n\nexport const Card = props => (\n  <div className=\"card-container\">\n    <img\n      alt=\"The Monster\"\n      src={`https://www.robohash.org/${props.monster.id}?set=set2&size=180x180`}\n    ></img>\n    <h2>{props.monster.name}</h2>\n    <p>\n      <a href={`mailto:${props.monster.email}`}>{props.monster.email}</a>\n    </p>\n  </div>\n);\n","import React from \"react\";\nimport { Card } from '../card/card.component';\n\nimport \"./card-list.styles.scss\";\n\nexport const CardList = props => {\n  if(props.monsters && props.monsters.length > 0 ) {\n    return (\n        <div className=\"card-list\">\n          {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n          ))}\n        </div>\n      );    \n  }\n  else {\n      if(props.searchField) {\n        return <div className='error'>No monsters found with the keyword \"{props.searchField}\".</div>\n      }\n  }\n  return '<span>...</span>';\n};\n","import React from \"react\";\nimport \"./search-box.styles.scss\";\nimport DelayInput from \"react-delay-input\";\n// functional components do not have a state or lifecycle methods\n// faster easier better, easier to test.\n//\n// recommended: always functional components unless state is needed\nexport const SearchBox = ({ placeholder, handleChange, minLength, delayTimeout }) => (\n  <DelayInput\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    size=\"large\"\n    minLength={minLength || 2}\n    delayTimeout={delayTimeout || 300}\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from './components/search-box/seach-box.component';\n\nimport \"./App.scss\";\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n\n    // bind event context to self (not neeeded when using arrow functions myFunc = (e) => { ... })\n    // this.handleSearchBoxChange = this.handleSearchBoxChange.bind(this);\n  }\n\n\n  // Lifecycle method\n  // Mount = React puts a component on a page\n  componentDidMount() {\n    // fetch returns a promise\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  // arrow functions automatically allow to set [this] scope\n  handleSearchBoxChange = (e) => {\n    this.setState({searchField: e.target.value.trim()})\n  }\n\n  render() {\n\n    // destructuring - pulling properties off of an object and set them to constants\n    // quicker way\n    const { monsters, searchField } = this.state;\n    const _s = searchField.toLowerCase();\n    const filteredMonsters = monsters.filter( monster => {\n      if('' === _s) return true;\n      return monster.name.toLowerCase().includes(_s);\n    });\n    \n    return (\n      <div className=\"App\">\n      <img\n        style={{ maxWidth: \"160px\", position: \"fixed\", top: '-48px', right: '-24px' }}\n        className=\"App-logo\"\n        src={logo}\n        alt=\"React logo\"\n      ></img>\n      <h1>Monsters Rolodex</h1>\n        <div style={{ margin: \"0 auto 40px\", textAlign: \"center\" }}>\n          <SearchBox\n            minLength={1}\n            delayTimeout={150}\n            placeholder='Search for a monster'\n            handleChange={this.handleSearchBoxChange} />\n        </div>\n        <CardList monsters={filteredMonsters} searchField={_s} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}